#pragma once

/* <-- Core Includes --> */
#include <Windows.h>
#include <WinSock2.h>
#include <iostream>
#include <string>
#include <format>

/* <-- Third Party Includes --> */
#include <Config/Config.hpp>
#include <Exploit/Execution/Execution.hpp>
#include <Dependencies/xor.hpp>

class Bridge {
public:
	static auto createPipe(std::string PipeName) -> void {
		auto execution{ Execution::getSingleton() };

		DWORD Read{};
		char BufferSize[999999];
		std::string
			Name = (xor("\\\\.\\pipe\\local\\") + PipeName),
			Script{};
		HANDLE Pipe = CreateNamedPipeA(Name.c_str(),
			PIPE_ACCESS_DUPLEX | PIPE_TYPE_BYTE | PIPE_READMODE_BYTE, PIPE_WAIT, 1,
			9999999, 9999999, NMPWAIT_USE_DEFAULT_WAIT, nullptr);

		if (Config::UseConsole)
			std::printf(xor("  Created Pipe\n"));

		while (Pipe != INVALID_HANDLE_VALUE) {
			if (ConnectNamedPipe(Pipe, nullptr) != FALSE) {
				while (ReadFile(Pipe, BufferSize, sizeof(BufferSize) - 1, &Read, nullptr) != FALSE) {
					BufferSize[Read] = '\0';
					Script += BufferSize;
				}
				
				execution->executeScript(Script);
				Script.clear();
			}
			DisconnectNamedPipe(Pipe);
		}
	}

	static auto getSingleton() -> Bridge* {
		return new Bridge();
	}
};