#pragma once

/* <-- Core Includes --> */
#include <Windows.h>
#include <cstdint>
#include <string>
#include <vector>
#include <iostream>

/* <-- Third Party Includes --> */
#include <Config/Config.hpp>
#include <Exploit/Offset/Offsets.hpp>
#include <Hooks/Hook.hpp>
#include <Dependencies/xor.hpp>

/* <-- Luau Includes --> */
#include <lstate.h>

/* Defines */
#define Convert(T, Data) reinterpret_cast<T>(Data);

class TaskScheduler {
private:
	static TaskScheduler* singleton;
public:	
	lua_State* luaState;
	std::uintptr_t scriptContext, dataModel;

	static auto getSingleton() -> TaskScheduler*;
	auto hookJob(void* MethodHook) -> std::intptr_t;
	auto getScheduler() -> std::uintptr_t;
	auto getJobs(std::string_view JobName) -> std::uintptr_t;
	auto initialize() -> void;

	auto getFps() -> std::double_t;
	auto setFps(std::double_t Cap) -> void;

	auto getIdentity() -> std::uint8_t;
	auto setIdentity(std::uint8_t NewIdentity) -> void;
};