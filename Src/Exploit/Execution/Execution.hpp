#pragma once

/* <-- Core Includes --> */
#include <string>
#include <random>
#include <stack>
#include <mutex>
#include <queue>

/* <-- Third Party Includes --> */
#include <Config/Config.hpp>
#include <Hooks/Hook.hpp>
#include <Exploit/TaskScheduler/TaskScheduler.hpp>
#include <Exploit/Environment/Environment.hpp>
#include <Exploit/Offset/Offsets.hpp>

/* <-- Luau Includes --> */
#include <Compiler.h>
#include <BytecodeBuilder.h>
#include <lualib.h>
#include <luaconf.h>
#include <lua.h>
#include <lfunc.h>
#include <lstate.h>
#include <lapi.h>

using jobType = std::uintptr_t(__thiscall*)(std::uintptr_t, std::uintptr_t);

class Execution {
public:
	static Execution* singleton;

	static class Encoding : public Luau::BytecodeEncoder {
		auto encodeOp(std::uint8_t op) -> std::uint8_t override {
			return (op * 227);
		}
	} encoding;
public:
	static auto getSingleton() -> Execution*;
	auto setupHook() -> void;
	auto executeScript(std::string script, std::string chunk = ("=" + Config::Name)) -> void;
};